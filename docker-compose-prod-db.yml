version: '3.7'
x-images: {env: &env {env_file: [.env, docker.env]}}
services:
  db:
    <<: [ *env ]
    image: "corpusops/pgrouting:10-2.5-2.6"
    volumes:
    - postgresql:/var/lib/postgresql/data
    ports:
    - "$POSTGRES_HOST_BIND_IP:$POSTGRES_HOST_BIND_PORT:5432"
  backup:
    <<: [ *env ]
    environment: {POSTGRES_HOST: db}
    image: "corpusops/dbsmartbackup:${DSB_VERSION:-pgrouting-10-2.5-2.6}"
    restart: always
    volumes:
    - backupdb-dumps:/var/db_smart_backup/
    - backupdb-logs:/var/db_smart_backup/logs/
  setup-postgres:
    <<: [ *env ]
    image: corpusops/pgrouting:10-2.5-2.6
    depends_on: [db]
    entrypoint:
    - /bin/sh
    - '-c'
    - |-
      set -ex
      POSTGRES_STARTUP_TIMEOUT=$${POSTGRES_STARTUP_TIMEOUT:-120s}
      POSTGRES_HOST=$${POSTGRES_HOST:-db}
      POSTGRES_PORT=$${POSTGRES_PORT:-5432}
      flag=/started_$$(echo $$POSTGRES_DB|sed -re "s![/:]!__!g")
      if [ -e "$$flag" ];then rm -f "$$flag";fi
      echo "Try connection to pgsql: $$POSTGRES_DB & wait for db init" >&2 \
      && ( while true;do if ( \
        echo "select 1 from spatial_ref_sys limit 1;select postgis_version();"\
        | psql -v ON_ERROR_STOP=1 \
          "postgres://$$POSTGRES_USER:$$POSTGRES_PASSWORD@$$POSTGRES_HOST:$$POSTGRES_PORT/$$POSTGRES_DB"\
      );then touch $$flag && break;fi;done )&
      set -x \
      && dockerize -wait file://$$flag -timeout $${POSTGRES_STARTUP_TIMEOUT} \
      && while true;do printf "HTTP/1.1 200 OK\n\nstarted"| ( nc -l -p 80 || /bin/true);done
volumes:
  backupdb-logs:
  backupdb-dumps:
  postgresql:
  logs:
